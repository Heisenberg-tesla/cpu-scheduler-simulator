{"ast":null,"code":"import _objectSpread from\"C:/Users/ayush/OneDrive/Desktop/Job Scheduler/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";export const sjf=processes=>{const processQueue=[...processes].map(p=>_objectSpread({},p));const ganttChart=[];const completedProcesses=[];let currentTime=0;while(processQueue.length>0){// Find all processes that have arrived by current time\nconst availableProcesses=processQueue.filter(p=>p.arrivalTime<=currentTime);if(availableProcesses.length===0){// No processes available, jump to next arrival time\ncurrentTime=Math.min(...processQueue.map(p=>p.arrivalTime));continue;}// Find process with shortest burst time among available processes\nconst shortestJob=availableProcesses.reduce((prev,curr)=>prev.burstTime<curr.burstTime?prev:curr);// Remove the process from queue\nconst processIndex=processQueue.findIndex(p=>p.id===shortestJob.id);processQueue.splice(processIndex,1);// Set start time if not already set (for response time)\nshortestJob.startTime=currentTime;shortestJob.responseTime=shortestJob.startTime-shortestJob.arrivalTime;// Add to Gantt chart\nganttChart.push({processId:shortestJob.id,startTime:currentTime,endTime:currentTime+shortestJob.burstTime,color:shortestJob.color});// Update times\ncurrentTime+=shortestJob.burstTime;shortestJob.completionTime=currentTime;shortestJob.turnaroundTime=shortestJob.completionTime-shortestJob.arrivalTime;shortestJob.waitingTime=shortestJob.turnaroundTime-shortestJob.burstTime;completedProcesses.push(shortestJob);}// Calculate averages\nconst avgWaitingTime=completedProcesses.reduce((sum,p)=>sum+p.waitingTime,0)/processes.length;const avgTurnaroundTime=completedProcesses.reduce((sum,p)=>sum+p.turnaroundTime,0)/processes.length;const avgResponseTime=completedProcesses.reduce((sum,p)=>sum+p.responseTime,0)/processes.length;return{ganttChart,processes:completedProcesses,averageWaitingTime:avgWaitingTime,averageTurnaroundTime:avgTurnaroundTime,averageResponseTime:avgResponseTime};};","map":{"version":3,"names":["sjf","processes","processQueue","map","p","_objectSpread","ganttChart","completedProcesses","currentTime","length","availableProcesses","filter","arrivalTime","Math","min","shortestJob","reduce","prev","curr","burstTime","processIndex","findIndex","id","splice","startTime","responseTime","push","processId","endTime","color","completionTime","turnaroundTime","waitingTime","avgWaitingTime","sum","avgTurnaroundTime","avgResponseTime","averageWaitingTime","averageTurnaroundTime","averageResponseTime"],"sources":["C:/Users/ayush/OneDrive/Desktop/Job Scheduler/src/algorithms/sjf.ts"],"sourcesContent":["import { Process, SchedulerResult, GanttChartBlock } from '../utils/types';\n\nexport const sjf = (processes: Process[]): SchedulerResult => {\n    const processQueue = [...processes].map(p => ({ ...p }));\n    const ganttChart: GanttChartBlock[] = [];\n    const completedProcesses: Process[] = [];\n    let currentTime = 0;\n\n    while (processQueue.length > 0) {\n        // Find all processes that have arrived by current time\n        const availableProcesses = processQueue.filter(p => p.arrivalTime <= currentTime);\n\n        if (availableProcesses.length === 0) {\n            // No processes available, jump to next arrival time\n            currentTime = Math.min(...processQueue.map(p => p.arrivalTime));\n            continue;\n        }\n\n        // Find process with shortest burst time among available processes\n        const shortestJob = availableProcesses.reduce((prev, curr) => \n            prev.burstTime < curr.burstTime ? prev : curr\n        );\n\n        // Remove the process from queue\n        const processIndex = processQueue.findIndex(p => p.id === shortestJob.id);\n        processQueue.splice(processIndex, 1);\n\n        // Set start time if not already set (for response time)\n        shortestJob.startTime = currentTime;\n        shortestJob.responseTime = shortestJob.startTime - shortestJob.arrivalTime;\n\n        // Add to Gantt chart\n        ganttChart.push({\n            processId: shortestJob.id,\n            startTime: currentTime,\n            endTime: currentTime + shortestJob.burstTime,\n            color: shortestJob.color\n        });\n\n        // Update times\n        currentTime += shortestJob.burstTime;\n        shortestJob.completionTime = currentTime;\n        shortestJob.turnaroundTime = shortestJob.completionTime - shortestJob.arrivalTime;\n        shortestJob.waitingTime = shortestJob.turnaroundTime - shortestJob.burstTime;\n\n        completedProcesses.push(shortestJob);\n    }\n\n    // Calculate averages\n    const avgWaitingTime = completedProcesses.reduce((sum, p) => sum + p.waitingTime!, 0) / processes.length;\n    const avgTurnaroundTime = completedProcesses.reduce((sum, p) => sum + p.turnaroundTime!, 0) / processes.length;\n    const avgResponseTime = completedProcesses.reduce((sum, p) => sum + p.responseTime!, 0) / processes.length;\n\n    return {\n        ganttChart,\n        processes: completedProcesses,\n        averageWaitingTime: avgWaitingTime,\n        averageTurnaroundTime: avgTurnaroundTime,\n        averageResponseTime: avgResponseTime\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}