{"ast":null,"code":"export const fcfs = processes => {\n  // Sort processes by arrival time\n  const sortedProcesses = [...processes].sort((a, b) => a.arrivalTime - b.arrivalTime);\n  const ganttChart = [];\n  let currentTime = 0;\n\n  // Process each job\n  sortedProcesses.forEach(process => {\n    const p = {\n      ...process\n    };\n\n    // If there's a gap between current time and process arrival\n    if (currentTime < p.arrivalTime) {\n      currentTime = p.arrivalTime;\n    }\n\n    // Set start time if not already set (for response time calculation)\n    p.startTime = currentTime;\n    p.responseTime = p.startTime - p.arrivalTime;\n\n    // Add to Gantt chart\n    ganttChart.push({\n      processId: p.id,\n      startTime: currentTime,\n      endTime: currentTime + p.burstTime,\n      color: p.color\n    });\n\n    // Update times\n    currentTime += p.burstTime;\n    p.completionTime = currentTime;\n    p.turnaroundTime = p.completionTime - p.arrivalTime;\n    p.waitingTime = p.turnaroundTime - p.burstTime;\n    return p;\n  });\n\n  // Calculate averages\n  const avgWaitingTime = sortedProcesses.reduce((sum, p) => sum + (p.waitingTime || 0), 0) / processes.length;\n  const avgTurnaroundTime = sortedProcesses.reduce((sum, p) => sum + (p.turnaroundTime || 0), 0) / processes.length;\n  const avgResponseTime = sortedProcesses.reduce((sum, p) => sum + (p.responseTime || 0), 0) / processes.length;\n  return {\n    ganttChart,\n    processes: sortedProcesses,\n    averageWaitingTime: avgWaitingTime,\n    averageTurnaroundTime: avgTurnaroundTime,\n    averageResponseTime: avgResponseTime\n  };\n};","map":{"version":3,"names":["fcfs","processes","sortedProcesses","sort","a","b","arrivalTime","ganttChart","currentTime","forEach","process","p","startTime","responseTime","push","processId","id","endTime","burstTime","color","completionTime","turnaroundTime","waitingTime","avgWaitingTime","reduce","sum","length","avgTurnaroundTime","avgResponseTime","averageWaitingTime","averageTurnaroundTime","averageResponseTime"],"sources":["C:/Users/ayush/OneDrive/Desktop/Job Scheduler/src/algorithms/fcfs.ts"],"sourcesContent":["import { Process, SchedulerResult, GanttChartBlock } from '../utils/types';\n\nexport const fcfs = (processes: Process[]): SchedulerResult => {\n    // Sort processes by arrival time\n    const sortedProcesses = [...processes].sort((a, b) => a.arrivalTime - b.arrivalTime);\n    const ganttChart: GanttChartBlock[] = [];\n    let currentTime = 0;\n    \n    // Process each job\n    sortedProcesses.forEach(process => {\n        const p = { ...process };\n        \n        // If there's a gap between current time and process arrival\n        if (currentTime < p.arrivalTime) {\n            currentTime = p.arrivalTime;\n        }\n        \n        // Set start time if not already set (for response time calculation)\n        p.startTime = currentTime;\n        p.responseTime = p.startTime - p.arrivalTime;\n        \n        // Add to Gantt chart\n        ganttChart.push({\n            processId: p.id,\n            startTime: currentTime,\n            endTime: currentTime + p.burstTime,\n            color: p.color\n        });\n        \n        // Update times\n        currentTime += p.burstTime;\n        p.completionTime = currentTime;\n        p.turnaroundTime = p.completionTime - p.arrivalTime;\n        p.waitingTime = p.turnaroundTime - p.burstTime;\n        \n        return p;\n    });\n    \n    // Calculate averages\n    const avgWaitingTime = sortedProcesses.reduce((sum, p) => sum + (p.waitingTime || 0), 0) / processes.length;\n    const avgTurnaroundTime = sortedProcesses.reduce((sum, p) => sum + (p.turnaroundTime || 0), 0) / processes.length;\n    const avgResponseTime = sortedProcesses.reduce((sum, p) => sum + (p.responseTime || 0), 0) / processes.length;\n    \n    return {\n        ganttChart,\n        processes: sortedProcesses,\n        averageWaitingTime: avgWaitingTime,\n        averageTurnaroundTime: avgTurnaroundTime,\n        averageResponseTime: avgResponseTime\n    };\n};\n"],"mappings":"AAEA,OAAO,MAAMA,IAAI,GAAIC,SAAoB,IAAsB;EAC3D;EACA,MAAMC,eAAe,GAAG,CAAC,GAAGD,SAAS,CAAC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,WAAW,GAAGD,CAAC,CAACC,WAAW,CAAC;EACpF,MAAMC,UAA6B,GAAG,EAAE;EACxC,IAAIC,WAAW,GAAG,CAAC;;EAEnB;EACAN,eAAe,CAACO,OAAO,CAACC,OAAO,IAAI;IAC/B,MAAMC,CAAC,GAAG;MAAE,GAAGD;IAAQ,CAAC;;IAExB;IACA,IAAIF,WAAW,GAAGG,CAAC,CAACL,WAAW,EAAE;MAC7BE,WAAW,GAAGG,CAAC,CAACL,WAAW;IAC/B;;IAEA;IACAK,CAAC,CAACC,SAAS,GAAGJ,WAAW;IACzBG,CAAC,CAACE,YAAY,GAAGF,CAAC,CAACC,SAAS,GAAGD,CAAC,CAACL,WAAW;;IAE5C;IACAC,UAAU,CAACO,IAAI,CAAC;MACZC,SAAS,EAAEJ,CAAC,CAACK,EAAE;MACfJ,SAAS,EAAEJ,WAAW;MACtBS,OAAO,EAAET,WAAW,GAAGG,CAAC,CAACO,SAAS;MAClCC,KAAK,EAAER,CAAC,CAACQ;IACb,CAAC,CAAC;;IAEF;IACAX,WAAW,IAAIG,CAAC,CAACO,SAAS;IAC1BP,CAAC,CAACS,cAAc,GAAGZ,WAAW;IAC9BG,CAAC,CAACU,cAAc,GAAGV,CAAC,CAACS,cAAc,GAAGT,CAAC,CAACL,WAAW;IACnDK,CAAC,CAACW,WAAW,GAAGX,CAAC,CAACU,cAAc,GAAGV,CAAC,CAACO,SAAS;IAE9C,OAAOP,CAAC;EACZ,CAAC,CAAC;;EAEF;EACA,MAAMY,cAAc,GAAGrB,eAAe,CAACsB,MAAM,CAAC,CAACC,GAAG,EAAEd,CAAC,KAAKc,GAAG,IAAId,CAAC,CAACW,WAAW,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGrB,SAAS,CAACyB,MAAM;EAC3G,MAAMC,iBAAiB,GAAGzB,eAAe,CAACsB,MAAM,CAAC,CAACC,GAAG,EAAEd,CAAC,KAAKc,GAAG,IAAId,CAAC,CAACU,cAAc,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGpB,SAAS,CAACyB,MAAM;EACjH,MAAME,eAAe,GAAG1B,eAAe,CAACsB,MAAM,CAAC,CAACC,GAAG,EAAEd,CAAC,KAAKc,GAAG,IAAId,CAAC,CAACE,YAAY,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGZ,SAAS,CAACyB,MAAM;EAE7G,OAAO;IACHnB,UAAU;IACVN,SAAS,EAAEC,eAAe;IAC1B2B,kBAAkB,EAAEN,cAAc;IAClCO,qBAAqB,EAAEH,iBAAiB;IACxCI,mBAAmB,EAAEH;EACzB,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}